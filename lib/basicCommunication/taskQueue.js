// Generated by CoffeeScript 1.10.0
(function() {
  var Promise;

  Promise = require('bluebird');

  module.exports = function(getStatusMethod, sleepTimeInSeconds) {
    var clear, createError, failedTasks, openTasks, service, wait;
    service = {};
    openTasks = [];
    failedTasks = [];
    service.waitTillOpenTasksHaveFinished = Promise.coroutine(function*() {
      var error;
      console.info('Waiting for tasks to finish...');
      while (openTasks.length > 0) {
        (yield this.updateTaskStatus());
        (yield wait());
      }
      if (failedTasks.length > 0) {
        error = createError();
        clear();
        throw error;
      }
      return clear();
    });
    service.updateTaskStatus = Promise.coroutine(function*() {
      var _openTasks, i, len, result, task;
      _openTasks = [];
      for (i = 0, len = openTasks.length; i < len; i++) {
        task = openTasks[i];
        result = (yield getStatusMethod(task));
        switch (result.status) {
          case 'QUEUED':
          case 'RUNNING':
            _openTasks.push(task);
            break;
          case 'DONE':
            break;
          default:
            failedTasks.push({
              task: task,
              result: result
            });
        }
      }
      return openTasks = _openTasks;
    });
    service.addTask = function(task) {
      return openTasks.push(task);
    };
    wait = Promise.coroutine(function*() {
      return (yield Promise.delay(sleepTimeInSeconds * 1000));
    });
    createError = function() {
      var results;
      results = failedTasks.map(function(item) {
        return "\n" + item.task + ": " + (JSON.stringify(item.result));
      }).concat();
      return new Error("The following tasks have failed: " + results);
    };
    clear = function() {
      openTasks = [];
      return failedTasks = [];
    };
    return service;
  };

}).call(this);
