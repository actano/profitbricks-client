// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, TaskQueue, URL_PREFIX, debug, request;

  debug = {
    request: require('debug')('pb-client-request'),
    response: require('debug')('pb-client-response')
  };

  Promise = require('bluebird');

  request = require('superagent');

  require('superagent-as-promised')(request);

  TaskQueue = require('./taskQueue');

  URL_PREFIX = 'https://api.profitbricks.com/rest/';


  /*
      This function provides the basic rest calls and takes care of
      Error Handling, Logging and Synchronization
   */

  module.exports = function(username, password, sleepTimeBetweenStatusRequests) {
    var service, taskQueue;
    if (sleepTimeBetweenStatusRequests == null) {
      sleepTimeBetweenStatusRequests = 2;
    }
    if ((username == null) || (password == null)) {
      throw new Error("no authentification provided");
    }
    service = {};
    service.status = Promise.coroutine(function*(url) {
      var err, error, error1, readingErrorError, response;
      try {
        response = (yield request.get(url).auth(username, password));
        return response.res.body.metadata;
      } catch (error) {
        err = error;
        try {
          response = err.response.res;
          return console.error("status polling failed - GET " + url + ": " + response.statusCode + " (" + response.statusMessage + ")\n" + response.text);
        } catch (error1) {
          readingErrorError = error1;
          return console.error("failed to parse status response - GET " + url + ": " + err);
        }
      }
    });
    taskQueue = new TaskQueue(service.status, sleepTimeBetweenStatusRequests);
    service.get = Promise.coroutine(function*(route) {
      var req, response, url;
      url = URL_PREFIX + route;
      req = request.get(url);
      response = (yield this.sendRequest(req, "GET " + route));
      return response.body;
    });
    service.getCollection = Promise.coroutine(function*(route) {
      return ((yield this.get(route))).items;
    });
    service.post = Promise.coroutine(function*(route, data) {
      var req, response, url;
      url = URL_PREFIX + route;
      req = request.post(url);
      if (data != null) {
        req = req.set('Content-Type', 'application/vnd.profitbricks.resource+json');
      }
      response = (yield this.sendRequest(req, "POST " + route, data));
      return response.body;
    });
    service.patch = Promise.coroutine(function*(route, data) {
      var req, response, url;
      url = URL_PREFIX + route;
      req = request.patch(url).set('Content-Type', 'application/vnd.profitbricks.partial-properties+json');
      response = (yield this.sendRequest(req, "PATCH " + route, data));
      return response.body;
    });
    service["delete"] = Promise.coroutine(function*(route) {
      var req, url;
      url = URL_PREFIX + route;
      req = request.del(url);
      return (yield this.sendRequest(req, "DELETE " + route));
    });
    service.sendRequest = Promise.coroutine(function*(request, msg, data) {
      var err, error, response;
      request = request.auth(username, password);
      try {
        console.info("> " + msg);
        if (data != null) {
          debug.request(JSON.stringify(data, null, 1));
          request = request.send(JSON.stringify(data));
        }
        response = ((yield request)).res;
        if ((response != null ? response.body : void 0) != null) {
          debug.response(JSON.stringify(response.body, null, 2));
        }
        console.info("< " + response.statusCode + " (" + response.statusMessage + ")");
        if (response.statusCode === 202) {
          taskQueue.addTask(response.headers.location);
        }
        return response;
      } catch (error) {
        err = error;
        response = err.response.res;
        throw new Error("Failed to " + msg + ": " + response.statusCode + " (" + response.statusMessage + ")\n" + response.text);
      }
    });
    service.waitTillOpenTasksHaveFinished = Promise.coroutine(function*() {
      return (yield taskQueue.waitTillOpenTasksHaveFinished());
    });
    return service;
  };

}).call(this);
