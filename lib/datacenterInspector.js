// Generated by CoffeeScript 1.10.0
(function() {
  var DatacenterInspector, DatacenterManager, Promise, RestClient, _, utils;

  Promise = require('bluebird');

  DatacenterManager = require('./datacenterManager');

  RestClient = require('./basicCommunication/rest-client');

  utils = require('./utils');

  _ = require('lodash');

  DatacenterInspector = (function() {
    function DatacenterInspector() {
      this.dcManager = new DatacenterManager();
      this.restClient = null;
      this.diffs = [];
    }

    DatacenterInspector.prototype.inspect = Promise.coroutine(function*(datacenter) {
      var datacenterId, path;
      this.datacenter = datacenter;
      datacenterId = (yield this.dcManager.findDatacenter(this.datacenter.getName())).id;
      this._initializeRestClient(datacenterId);
      this.remoteDatacenter = (yield this.restClient.getDatacenter());
      path = "Datacenter ('" + (this.datacenter.getName()) + "') -> ";
      this._diffLans(path);
      this._diffVolumes(path);
      return this._diffServers(path);
    });

    DatacenterInspector.prototype._initializeRestClient = function(datacenterId) {
      return this.restClient = RestClient(this.dcManager.getBasicClient(), datacenterId);
    };

    DatacenterInspector.prototype._diffLans = function(path) {
      return this._diffArrays(this.datacenter.getLans(), this.remoteDatacenter.entities.lans.items, 'Lan', path);
    };

    DatacenterInspector.prototype._diffVolumes = function(path) {
      var volumes;
      volumes = this.datacenter.getServers().map(function(server) {
        return server.getVolumes();
      }).reduce(function(x, y) {
        return x.concat(y);
      });
      return this._diffArrays(volumes, this.remoteDatacenter.entities.volumes.items, 'Volume', path);
    };

    DatacenterInspector.prototype._diffServers = function(path) {
      var i, j, len, len1, ref, ref1, remoteServer, remoteServers, results, server, serverPath, type;
      this._diffArrays(this.datacenter.getServers(), this.remoteDatacenter.entities.servers.items, 'Server', path);
      remoteServers = this._createMapByName(this.remoteDatacenter.entities.servers.items);
      ref = this.datacenter.getServers();
      for (i = 0, len = ref.length; i < len; i++) {
        server = ref[i];
        serverPath = path + " Server ('" + (server.getName()) + "') ->";
        type = 'Volume';
        remoteServer = remoteServers[server.getName()];
        this._diffArrays(server.getVolumes(), remoteServer.entities.volumes.items, type, serverPath);
      }
      ref1 = this.datacenter.getServers();
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        server = ref1[j];
        serverPath = path + " Server ('" + (server.getName()) + "') ->";
        type = 'NIC';
        remoteServer = remoteServers[server.getName()];
        results.push(this._diffArrays(server.getNics(), remoteServer.entities.nics.items, type, serverPath));
      }
      return results;
    };

    DatacenterInspector.prototype._diffArrays = function(model, remote, type, path) {
      var missing, modelDuplicates, modelNames, moreThanDefined, remoteDuplicates, remoteNames;
      modelNames = model.map(function(item) {
        return item.getName();
      });
      remoteNames = remote.map(function(item) {
        return item.properties.name;
      });
      modelDuplicates = this._findDuplicates(modelNames);
      modelDuplicates.forEach(function(name) {
        return console.info(path + " More than one " + type + " with '" + name + "' found in datacenter definition");
      });
      remoteDuplicates = this._findDuplicates(remoteNames);
      remoteDuplicates.forEach(function(name) {
        return console.info(path + " More than one " + type + " with '" + name + "' found in remote datacenter");
      });
      missing = modelNames.filter(function(name) {
        return remoteNames.indexOf(name) < 0;
      });
      missing.forEach(function(name) {
        return console.info(path + " Missing " + type + " '" + name + "' in Remote Datacenter");
      });
      moreThanDefined = remoteNames.filter(function(name) {
        return modelNames.indexOf(name) < 0;
      });
      moreThanDefined.forEach(function(name) {
        return console.info(path + " Found undefined " + type + " '" + name + "' in Remote Datacenter");
      });
      return this._diffPropertiesOfArrays(model, remote, type, path);
    };

    DatacenterInspector.prototype._diffPropertiesOfArrays = function(model, remote, type, _path) {
      var i, item, len, path, remoteItem, results;
      remote = this._createMapByName(remote);
      results = [];
      for (i = 0, len = model.length; i < len; i++) {
        item = model[i];
        path = _path + " " + type + " ('" + (item.getName()) + "') ->";
        remoteItem = remote[item.getName()];
        if (remoteItem != null) {
          results.push(this._diffProperties(item, remoteItem, path));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    DatacenterInspector.prototype._diffProperties = function(model, remote, path) {
      var key, modelValue, ref, remoteValue, results;
      ref = model.json.properties;
      results = [];
      for (key in ref) {
        modelValue = ref[key];
        remoteValue = remote.properties[key];
        if (modelValue === '<auto-generated-id>' || modelValue.id === '<auto-generated-id>') {
          continue;
        }
        if (!_.isEqual(modelValue, remoteValue)) {
          results.push(console.info(path + " " + key + ": Remote value '" + remoteValue + "' does not match defined value '" + modelValue + "'"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    DatacenterInspector.prototype._createMapByName = function(array) {
      return array.reduce(function(previousValue, currentValue) {
        previousValue[currentValue.properties.name] = currentValue;
        return previousValue;
      }, {});
    };

    DatacenterInspector.prototype._findDuplicates = function(array) {
      var duplicatedElements;
      duplicatedElements = array.sort().filter(function(element, index, array) {
        return element === array[index + 1];
      });
      return _.uniq(duplicatedElements, true);
    };

    return DatacenterInspector;

  })();

  module.exports = DatacenterInspector;

}).call(this);
