// Generated by CoffeeScript 1.10.0
(function() {
  var Datacenter, Lan, Nic, Server, Volume, _;

  _ = require('lodash');

  Datacenter = (function() {
    function Datacenter(actanoJson, defaults1) {
      var ref, ref1;
      this.defaults = defaults1;
      this.lans = [];
      this.servers = [];
      this.json = {
        properties: {
          name: actanoJson.name,
          description: (ref = actanoJson.description) != null ? ref : this.defaults.datacenter.description,
          location: (ref1 = actanoJson.location) != null ? ref1 : this.defaults.datacenter.location
        }
      };
      this._addLans(actanoJson.lans);
      this._addServers(actanoJson.servers);
    }

    Datacenter.prototype.getName = function() {
      return this.json.properties.name;
    };

    Datacenter.prototype.getLans = function() {
      return this.lans;
    };

    Datacenter.prototype.getServers = function() {
      return this.servers;
    };

    Datacenter.prototype.toJson = function() {
      return this.json;
    };

    Datacenter.prototype._addLans = function(lans) {
      var i, lan, lanJson, len, results;
      if (lans == null) {
        lans = [];
      }
      results = [];
      for (i = 0, len = lans.length; i < len; i++) {
        lanJson = lans[i];
        lan = new Lan(lanJson, this.defaults);
        results.push(this._addLan(lan));
      }
      return results;
    };

    Datacenter.prototype._addServers = function(servers) {
      var i, len, results, server, serverJson;
      if (servers == null) {
        servers = [];
      }
      results = [];
      for (i = 0, len = servers.length; i < len; i++) {
        serverJson = servers[i];
        server = new Server(serverJson, this.defaults);
        results.push(this._addServer(server));
      }
      return results;
    };

    Datacenter.prototype._addLan = function(lan) {
      return this.lans.push(lan);
    };

    Datacenter.prototype._addServer = function(server) {
      return this.servers.push(server);
    };

    return Datacenter;

  })();

  Lan = (function() {
    function Lan(actanoJson, defaults) {
      var ref;
      this.json = {
        properties: {
          name: actanoJson.name,
          "public": (ref = actanoJson["public"]) != null ? ref : defaults.lan["public"]
        }
      };
    }

    Lan.prototype.getName = function() {
      return this.json.properties.name;
    };

    Lan.prototype.toJson = function() {
      return this.json;
    };

    return Lan;

  })();

  Server = (function() {
    function Server(actanoJson, defaults1) {
      var ref, ref1, ref2;
      this.defaults = defaults1;
      this.nics = [];
      this.volumes = [];
      this.json = {
        properties: {
          name: actanoJson.name,
          cores: (ref = actanoJson.cores) != null ? ref : this.defaults.server.cores,
          ram: (ref1 = actanoJson.ram) != null ? ref1 : this.defaults.server.ram,
          availabilityZone: (ref2 = actanoJson.availabilityZone) != null ? ref2 : this.defaults.server.availabilityZone,
          bootVolume: {
            id: '<auto-generated-id>'
          }
        },
        entities: {
          nics: {
            items: []
          },
          volumes: {
            items: []
          }
        }
      };
      this._addVolumes(actanoJson.volumes);
      this._addNics(actanoJson.nics);
    }

    Server.prototype.getName = function() {
      return this.json.properties.name;
    };

    Server.prototype.getNics = function() {
      return this.nics;
    };

    Server.prototype.getVolumes = function() {
      return this.volumes;
    };

    Server.prototype.setBootVolumeId = function(id) {
      return this.json.properties.bootVolume.id = id;
    };

    Server.prototype._addVolumes = function(volumes) {
      var i, len, results, volume, volumeJson;
      results = [];
      for (i = 0, len = volumes.length; i < len; i++) {
        volumeJson = volumes[i];
        if (volumeJson.name == null) {
          this._setVolumeName(volumeJson);
        }
        volume = new Volume(volumeJson, this.defaults);
        results.push(this._addVolume(volume));
      }
      return results;
    };

    Server.prototype._addNics = function(nics) {
      var i, len, nic, nicJson, results;
      results = [];
      for (i = 0, len = nics.length; i < len; i++) {
        nicJson = nics[i];
        nic = new Nic(nicJson, this.defaults);
        results.push(this._addNic(nic));
      }
      return results;
    };

    Server.prototype._addVolume = function(volume) {
      return this.volumes.push(volume);
    };

    Server.prototype._addNic = function(nic) {
      return this.nics.push(nic);
    };

    Server.prototype._setVolumeName = function(volumeJson) {
      var postfix, ref;
      postfix = (ref = volumeJson.namePostfix) != null ? ref : this.defaults.volume.namePostfix;
      return volumeJson.name = this.getName() + postfix;
    };

    Server.prototype.toJson = function() {
      var i, len, nic, ref, result;
      result = _.cloneDeep(this.json);
      ref = this.nics;
      for (i = 0, len = ref.length; i < len; i++) {
        nic = ref[i];
        result.entities.nics.items.push(nic.toJson());
      }
      return result;
    };

    return Server;

  })();

  Volume = (function() {
    function Volume(actanoJson, defaults) {
      var ref, ref1, ref2, ref3;
      this.imageName = (ref = actanoJson.image) != null ? ref : defaults.volume.image;
      this.json = {
        properties: {
          name: actanoJson.name,
          type: (ref1 = actanoJson.type) != null ? ref1 : defaults.volume.type,
          size: (ref2 = actanoJson.size) != null ? ref2 : defaults.volume.size,
          image: '<auto-generated-id>',
          bus: (ref3 = actanoJson.bus) != null ? ref3 : defaults.volume.bus
        }
      };
    }

    Volume.prototype.getName = function() {
      return this.json.properties.name;
    };

    Volume.prototype.getImageName = function() {
      return this.imageName;
    };

    Volume.prototype.setImageId = function(id) {
      return this.json.properties.image = id;
    };

    Volume.prototype.toJson = function() {
      return this.json;
    };

    return Volume;

  })();

  Nic = (function() {
    function Nic(actanoJson, defaults) {
      var ref, ref1, ref2;
      if (defaults == null) {
        defaults = {};
      }
      this.json = {
        properties: {
          name: actanoJson.name,
          ips: (ref = actanoJson.ips) != null ? ref : defaults.nic.ips,
          dhcp: (ref1 = actanoJson.dhcp) != null ? ref1 : defaults.nic.dhcp,
          lan: '<auto-generated-id>',
          firewallActive: (ref2 = actanoJson.firewallActive) != null ? ref2 : defaults.nic.firewallActive
        }
      };
    }

    Nic.prototype.getName = function() {
      return this.json.properties.name;
    };

    Nic.prototype.setLanId = function(id) {
      return this.json.properties.lan = id;
    };

    Nic.prototype.toJson = function() {
      return this.json;
    };

    return Nic;

  })();

  module.exports = {
    Datacenter: Datacenter,
    Lan: Lan,
    Server: Server,
    Volume: Volume,
    Nic: Nic
  };

}).call(this);
