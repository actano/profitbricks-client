// Generated by CoffeeScript 1.10.0
(function() {
  var DatacenterManager, DatacenterToolbox, Promise, RestClient, utils;

  Promise = require('bluebird');

  DatacenterManager = require('./datacenterManager');

  RestClient = require('./basicCommunication/rest-client');

  utils = require('./utils');

  DatacenterToolbox = (function() {
    function DatacenterToolbox(datacenterName) {
      this.datacenterName = datacenterName;
      this.dcManager = new DatacenterManager();
      this.restClient = null;
    }

    DatacenterToolbox.prototype.startAllServers = Promise.coroutine(function*() {
      var i, len, server, servers;
      (yield this._ensureInitialization());
      servers = (yield this.restClient.listServers());
      for (i = 0, len = servers.length; i < len; i++) {
        server = servers[i];
        (yield this.restClient.startServer(server.id));
      }
      return (yield this.restClient.waitTillOpenTasksHaveFinished());
    });

    DatacenterToolbox.prototype.stopAllServers = Promise.coroutine(function*() {
      var i, len, server, servers;
      (yield this._ensureInitialization());
      servers = (yield this.restClient.listServers());
      for (i = 0, len = servers.length; i < len; i++) {
        server = servers[i];
        (yield this.restClient.stopServer(server.id));
      }
      return (yield this.restClient.waitTillOpenTasksHaveFinished());
    });

    DatacenterToolbox.prototype._ensureInitialization = Promise.coroutine(function*() {
      if (!this._inititalized()) {
        return (yield this._initialize());
      }
    });

    DatacenterToolbox.prototype._initialize = Promise.coroutine(function*() {
      var datacenter;
      datacenter = (yield this.dcManager.findDatacenter(this.datacenterName));
      return this.restClient = RestClient(this.dcManager.getBasicClient(), datacenter.id);
    });

    DatacenterToolbox.prototype._inititalized = function() {
      return this.restClient != null;
    };

    return DatacenterToolbox;

  })();

  module.exports = DatacenterToolbox;

}).call(this);
