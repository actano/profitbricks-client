// Generated by CoffeeScript 1.10.0
(function() {
  var DatacenterCreator, DatacenterManager, Promise, RestClient, utils;

  Promise = require('bluebird');

  DatacenterManager = require('./datacenterManager');

  RestClient = require('./basicCommunication/rest-client');

  utils = require('./utils');

  DatacenterCreator = (function() {
    function DatacenterCreator() {
      this.dcManager = new DatacenterManager();
      this.restClient = null;
    }

    DatacenterCreator.prototype.createOrReplaceDatacenter = Promise.coroutine(function*(datacenter) {
      (yield this.dcManager.deleteDatacenterIfExists(datacenter.getName()));
      return (yield this.createDatacenter(datacenter));
    });

    DatacenterCreator.prototype.createDatacenter = Promise.coroutine(function*(datacenter) {
      var createdDatacenter;
      createdDatacenter = (yield this.dcManager.createDatacenter(datacenter.toJson()));
      this._initializeRestClient(createdDatacenter.id);
      (yield this._addLans(datacenter.getLans()));
      return (yield this._addServers(datacenter.getServers()));
    });

    DatacenterCreator.prototype.addServersToDatacenter = Promise.coroutine(function*(datacenter) {
      var remoteDatacenter;
      remoteDatacenter = (yield this.dcManager.findDatacenter(datacenter.getName()));
      this._initializeRestClient(remoteDatacenter.id);
      return (yield this._addMissingServers(datacenter.getServers()));
    });

    DatacenterCreator.prototype.createLan = Promise.coroutine(function*(lan) {
      var remoteLans;
      remoteLans = (yield this.restClient.listLans());
      utils.itemWithThisNameAlreadyExistsGuard('LAN', remoteLans, lan.getName());
      this.lans = null;
      console.log("creating lan '" + (lan.getName()) + "'");
      (yield this.restClient.createLan(lan.toJson()));
      return (yield this.restClient.waitTillOpenTasksHaveFinished());
    });

    DatacenterCreator.prototype.createServer = Promise.coroutine(function*(server) {
      var remoteServers, volume;
      remoteServers = (yield this.restClient.listServers());
      utils.itemWithThisNameAlreadyExistsGuard('Server', remoteServers, server.getName());
      console.log("creating volume for server '" + (server.getName()) + "'");
      volume = (yield this.createVolume(server.volumes[0]));
      server.setBootVolumeId(volume.id);
      (yield this._setLanIds(server.getNics()));
      console.log("creating server '" + (server.getName()) + "'");
      (yield this.restClient.createServer(server.toJson()));
      (yield this.restClient.waitTillOpenTasksHaveFinished());
      return server;
    });

    DatacenterCreator.prototype.createVolume = Promise.coroutine(function*(volume) {
      var createdVolume, imageOrSnapshot, remoteVolumes;
      remoteVolumes = (yield this.restClient.listVolumes());
      utils.itemWithThisNameAlreadyExistsGuard('Volume', remoteVolumes, volume.getName());
      imageOrSnapshot = (yield this.findImageOrSnapshot(volume.getImageName()));
      volume.setImageId(imageOrSnapshot.id);
      createdVolume = (yield this.restClient.createVolume(volume.toJson()));
      (yield this.restClient.waitTillOpenTasksHaveFinished());
      return createdVolume;
    });

    DatacenterCreator.prototype.findLan = Promise.coroutine(function*(name) {
      if (this.lans == null) {
        this.lans = (yield this.restClient.listLans());
      }
      return utils.getItemByName('LAN', this.lans, name);
    });

    DatacenterCreator.prototype.findImageOrSnapshot = Promise.coroutine(function*(name) {
      if (this.imagesAndSnapshots == null) {
        (yield this._loadImagesAndSnapshots());
      }
      return utils.getItemByName('Image or Snapshot', this.imagesAndSnapshots, name);
    });

    DatacenterCreator.prototype._initializeRestClient = function(datacenterId) {
      return this.restClient = RestClient(this.dcManager.getBasicClient(), datacenterId);
    };

    DatacenterCreator.prototype._loadImagesAndSnapshots = Promise.coroutine(function*() {
      var images, snapshots;
      images = (yield this.dcManager.listImages());
      snapshots = (yield this.dcManager.listSnapshots());
      return this.imagesAndSnapshots = images.concat(snapshots);
    });

    DatacenterCreator.prototype._addLans = Promise.coroutine(function*(lans) {
      var i, lan, len, results;
      results = [];
      for (i = 0, len = lans.length; i < len; i++) {
        lan = lans[i];
        results.push((yield this.createLan(lan)));
      }
      return results;
    });

    DatacenterCreator.prototype._addServers = Promise.coroutine(function*(servers) {
      var i, index, len, results, server;
      results = [];
      for (index = i = 0, len = servers.length; i < len; index = ++i) {
        server = servers[index];
        console.log("server " + (index + 1) + "/" + servers.length + ": " + (server.getName()));
        results.push((yield this.createServer(server)));
      }
      return results;
    });

    DatacenterCreator.prototype._addMissingServers = Promise.coroutine(function*(definedServers) {
      var existingServers, missingServers;
      existingServers = (yield this.restClient.listServers());
      missingServers = this._calculateMissingServers(definedServers, existingServers);
      return (yield this._addServers(missingServers));
    });

    DatacenterCreator.prototype._calculateMissingServers = function(definedServers, existingServers) {
      var existingServerNames, missingServers;
      existingServerNames = existingServers.map(function(item) {
        return item.properties.name;
      });
      missingServers = definedServers.filter(function(item) {
        return existingServerNames.indexOf(item.getName()) < 0;
      });
      return missingServers;
    };

    DatacenterCreator.prototype._setLanIds = Promise.coroutine(function*(nics) {
      var i, lan, len, nic, results;
      results = [];
      for (i = 0, len = nics.length; i < len; i++) {
        nic = nics[i];
        lan = (yield this.findLan(nic.getName()));
        results.push(nic.setLanId(lan.id));
      }
      return results;
    });

    return DatacenterCreator;

  })();

  module.exports = DatacenterCreator;

}).call(this);
