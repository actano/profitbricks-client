// Generated by CoffeeScript 1.10.0
(function() {
  var utils;

  utils = {
    itemWithThisNameAlreadyExistsGuard: function(itemType, items, name) {
      var res;
      res = this.getItemsByName(items, name);
      if (res.length > 0) {
        throw new Error(itemType + " with name '" + name + "' already exists!");
      }
    },
    getItemByName: function(itemType, items, name) {
      var itemsNames, res;
      res = this.getItemsByName(items, name);
      if (res.length < 1) {
        itemsNames = items.map(function(item) {
          return item.properties.name;
        }).toString();
        throw new Error(itemType + " with name " + name + " not found. Available " + itemType + "s: " + itemsNames);
      }
      if (res.length > 1) {
        throw new Error("More than one " + itemType + " with name " + name + " found");
      }
      return res[0];
    },
    getItemsByName: function(items, name) {
      return items.filter((function(item) {
        return item.properties.name === name;
      }));
    },
    getItemTypeAsString: function(item) {
      return item.type[0].toUpperCase() + item.type.substring(1);
    },
    printCollection: function(items) {
      var i, item, len, results;
      results = [];
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        results.push(this.printItem(item));
      }
      return results;
    },
    printItem: function(item) {
      var err, error, type;
      try {
        type = item.type[0].toUpperCase() + item.type.substring(1);
        return console.log(type + " '" + item.properties.name + "': " + item.id);
      } catch (error) {
        err = error;
        console.error('Item', item);
        throw err;
      }
    },
    printIps: function(server) {
      var i, item, len, ref, results;
      ref = server.entities.nics.items;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        results.push(console.log(item.name + ": " + (item.properties.ips.join(' | '))));
      }
      return results;
    },
    printTimeInMinutes: function(startTime) {
      var minutes, time;
      time = new Date().getTime() - startTime;
      minutes = time / 60000;
      return console.log('Time passed in minutes: ', minutes);
    }
  };

  module.exports = utils;

}).call(this);
