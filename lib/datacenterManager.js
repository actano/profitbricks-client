// Generated by CoffeeScript 1.10.0
(function() {
  var BasicClient, Promise, utils;

  Promise = require('bluebird');

  BasicClient = require('./basicCommunication/basicClient');

  utils = require('./utils');

  module.exports = function(user, password) {
    var _createDatacenter, _deleteDatacenter, basicClient, service;
    if (user == null) {
      user = process.env['PROFITBRICKS_USER'];
    }
    if (password == null) {
      password = process.env['PROFITBRICKS_PASSWORD'];
    }
    basicClient = BasicClient(user, password);
    service = {};
    service.getBasicClient = function() {
      return basicClient;
    };
    service.listDatacenters = Promise.coroutine(function*() {
      var route;
      route = 'datacenters?depth=1';
      return (yield basicClient.getCollection(route));
    });
    service.findDatacenter = Promise.coroutine(function*(name) {
      var datacenters;
      datacenters = (yield this.listDatacenters());
      return utils.getItemByName('Datacenter', datacenters, name);
    });
    service.hasDatacenter = Promise.coroutine(function*(name) {
      var datacenters;
      datacenters = (yield this.listDatacenters());
      return utils.getItemsByName(datacenters, name).length > 0;
    });
    service.createDatacenter = Promise.coroutine(function*(data) {
      var datacenter, datacenters;
      datacenters = (yield this.listDatacenters());
      utils.itemWithThisNameAlreadyExistsGuard('Datacenter', datacenters, data.properties.name);
      datacenter = (yield _createDatacenter(data));
      (yield basicClient.waitTillOpenTasksHaveFinished());
      return datacenter;
    });
    service.deleteDatacenter = Promise.coroutine(function*(name) {
      var datacenter;
      datacenter = (yield this.findDatacenter(name));
      (yield _deleteDatacenter(datacenter.id));
      return (yield basicClient.waitTillOpenTasksHaveFinished());
    });
    service.deleteDatacenterIfExists = Promise.coroutine(function*(name) {
      var err, error;
      try {
        return (yield this.deleteDatacenter(name));
      } catch (error) {
        err = error;
        console.log('could not delete, because:');
        return console.log(err.message);
      }
    });
    service.listSnapshots = Promise.coroutine(function*() {
      var route;
      route = 'snapshots?depth=5';
      return (yield basicClient.getCollection(route));
    });
    service.listImages = Promise.coroutine(function*() {
      var route;
      route = 'images?depth=5';
      return (yield basicClient.getCollection(route));
    });
    service.findImage = Promise.coroutine(function*(name) {
      var images;
      images = (yield this.listImages());
      return utils.getItemByName('Image', images, name);
    });
    service.findSnapshot = Promise.coroutine(function*(name) {
      var snapshots;
      snapshots = (yield this.listSnapshots());
      return utils.getItemByName('Snapshot', snapshots, name);
    });
    service.findImageOrSnapshot = Promise.coroutine(function*(name) {
      var images, snapshots;
      images = (yield this.listImages());
      snapshots = (yield this.listSnapshots());
      return utils.getItemByName('Image or Snapshot', images.concat(snapshots), name);
    });
    service.waitTillOpenTasksHaveFinished = Promise.coroutine(function*() {
      return (yield basicClient.waitTillOpenTasksHaveFinished());
    });
    _createDatacenter = Promise.coroutine(function*(data) {
      var route;
      route = 'datacenters';
      return (yield basicClient.post(route, data));
    });
    _deleteDatacenter = Promise.coroutine(function*(datacenterId) {
      var route;
      route = "datacenters/" + datacenterId;
      return (yield basicClient["delete"](route));
    });
    return service;
  };

}).call(this);
