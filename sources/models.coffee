_ = require 'lodash'

class BasicItem
    getName: ->
        return @json.properties.name

    diff: (other, @parents, arrays...) ->
        @_setHierarchyString()
        @_diffProperties other
        @_diffArrays arrays

    _setHierarchyString: ->
        @parents += "#{@constructor.name} ('#{@getName()}') -> "

    _diffProperties: (other) ->
        for key, myValue of @json.properties
            otherValue = other.properties[key]
            if not _.isEqual myValue, otherValue
                console.log "#{parents}#{key}: \'#{otherValue}\' should be \'#{myValue}\'"

    _diffArrays: (arrays) ->
        console.log arrays.length


class Datacenter
    constructor: (actanoJson, @defaults) ->
        @lans = []
        @servers = []

        @json =
            properties:
                name: actanoJson.name
                description: actanoJson.description or @defaults.datacenter.description
                location: actanoJson.location or @defaults.datacenter.location

        @_setLans actanoJson.lans
        @_setServers actanoJson.servers

    getName: ->
        return @json.properties.name

    getLans: ->
        return @lans

    getServers: ->
        return @servers

    toJson: ->
        return @json

    _setLans: (lans = []) ->
        for lanJson in lans
            lan = new Lan lanJson, @defaults
            @_addLan lan

    _setServers: (servers = []) ->
        for serverJson in servers
            server = new Server serverJson, @defaults
            @_addServer server

    _addLan: (lan) ->
        @lans.push lan

    _addServer: (server) ->
        @servers.push server


class Lan
    constructor: (actanoJson, defaults) ->
        @json =
            properties:
                name: actanoJson.name
                public: actanoJson.public or defaults.lan.public

    toJson: ->
        return @json


class Server
    constructor: (actanoJson, @defaults) ->
        @nics = []
        @volumes = []

        @json =
            properties:
                name: actanoJson.name
                cores: actanoJson.cores or @defaults.server.cores
                ram: actanoJson.ram or @defaults.server.ram
                availabilityZone: actanoJson.availabilityZone or @defaults.server.availabilityZone
                bootVolume: id: '<auto-generated-id>'
            entities:
                nics:
                    items: []
                volumes:
                    items: []

        for volumeJson in actanoJson.volumes
            until volumeJson.name?
                @_setVolumeName volumeJson

            volume = new Volume volumeJson, @defaults
            @_addVolume volume

        for nicJson in actanoJson.nics
            nic = new Nic nicJson, @defaults
            @_addNic nic

    getName: ->
        return @json.properties.name

    getNics: ->
        return @nics

    getVolumes: ->
        return @volumes

    setBootVolumeId: (id) ->
        @json.properties.bootVolume.id = id

    _addVolume: (volume) ->
        @volumes.push volume

    _addNic: (nic) ->
        @nics.push nic

    _setVolumeName: (volumeJson) ->
        postfix = volumeJson.namePostfix or @defaults.volume.namePostfix
        volumeJson.name = @getName() + postfix

    toJson: ->
        result = _.cloneDeep @json

        for nic in @nics
            result.entities.nics.items.push nic.toJson()

        return result


class Volume
    constructor: (actanoJson, defaults) ->
        @imageName = actanoJson.image or defaults.volume.image

        @json =
            properties:
                name: actanoJson.name
                type: actanoJson.type or defaults.volume.type
                size: actanoJson.size or defaults.volume.size
                image: '<auto-generated-id>'
                bus: actanoJson.bus or defaults.volume.bus

    getImageName: ->
        return @imageName

    setImageId: (id) ->
        @json.properties.image = id

    toJson: ->
        return @json


class Nic
    constructor: (actanoJson, defaults = {}) ->
        @json =
            properties:
                name: actanoJson.name
                ips: actanoJson.ips or defaults.nic.ips,
                dhcp: actanoJson.dhcp or defaults.nic.dhcp
                lan: '<auto-generated-id>'
                firewallActive: actanoJson.firewallActive or defaults.nic.firewallActive

    getName: ->
        return @json.properties.name

    setLanId: (id) ->
        @json.properties.lan = id

    toJson: ->
        return @json


module.exports = {
    Datacenter
    Lan
    Server
    Volume
    Nic
}
