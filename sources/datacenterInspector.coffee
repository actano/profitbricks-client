Promise = require 'bluebird'
DatacenterManager = require './datacenterManager'
RestClient = require './basicCommunication/rest-client'
utils = require './utils'
_ = require 'lodash'

class DatacenterInspector
    constructor: ->
        @dcManager = new DatacenterManager()
        @restClient = null
        @diffs = []

    inspect: Promise.coroutine (@datacenter) ->
        @remoteDatacenter = yield @dcManager.findDatacenter @datacenter.getName()
        @_initializeRestClient @remoteDatacenter.id
        @remoteDatacenter = yield @restClient.getDatacenter()

        path = "Datacenter ('#{@datacenter.getName()}') -> "

        @_diffLans path
        @_diffVolumes path
        @_diffServers path

    _initializeRestClient: (datacenterId) ->
        @restClient = RestClient @dcManager.getBasicClient(), datacenterId

    _diffLans: (path) ->
        console.log @remoteDatacenter.entities.lans.items
        @_diffArrays @datacenter.getLans(),
            @remoteDatacenter.entities.lans.items,
            'Lan',
            path

    _diffVolumes: (path) ->
        volumes = @datacenter.getServers().map( (server) -> server.getVolumes() ).reduce (x, y) -> x.concat y
        @_diffArrays volumes,
            @remoteDatacenter.entities.volumes.items,
            'Volume',
            path

    _diffServers: (path) ->
        @_diffArrays @datacenter.getServers(),
            @remoteDatacenter.entities.servers.items,
            'Server',
            path

        remoteServers = @_createMap @remoteDatacenter.entities.servers.items

        for server in @datacenter.getServers()
            serverPath = "#{path} Server ('#{server.getName()}') ->"
            type = 'Volume'
            remoteServer = remoteServers[server.getName()]
            @_diffArrays server.getVolumes(), remoteServer.entities.volumes.items, type, serverPath

        for server in @datacenter.getServers()
            serverPath = "#{path} Server ('#{server.getName()}') ->"
            type = 'NIC'
            remoteServer = remoteServers[server.getName()]
            @_diffArrays server.getNics(), remoteServer.entities.nics.items, type, serverPath

    _diffArrays: (model, remote, type, path) ->
        modelNames = model.map (item) -> item.getName()
        remoteNames = remote.map (item) -> item.properties.name

        modelDuplicates = @_findDuplicates modelNames
        modelDuplicates.forEach (name) -> console.info "#{path} More than one #{type} with '#{name}' found in datacenter definition"

        remoteDuplicates = @_findDuplicates remoteNames
        remoteDuplicates.forEach (name) -> console.info "#{path} More than one #{type} with '#{name}' found in remote datacenter"

        missing = modelNames.filter (name) -> remoteNames.indexOf(name) < 0
        missing.forEach (name) -> console.info "#{path} Missing #{type} '#{name}' in Remote Datacenter"

        moreThanDefined = remoteNames.filter (name) -> modelNames.indexOf(name) < 0
        moreThanDefined.forEach (name) -> console.info "#{path} Found undefined #{type} '#{name}' in Remote Datacenter"

        @_diffPropertiesOfArrays model, remote, type, path

    _diffPropertiesOfArrays: (model, remote, type, _path) ->
        remote = @_createMap remote
        for item in model
            path = "#{_path} #{type} ('#{item.getName()}') ->"
            remoteItem = remote[item.getName()]
            @_diffProperties item, remoteItem, path if remoteItem?

    _diffProperties: (model, remote, path) ->
        for key, modelValue of model.json.properties
            remoteValue = remote.properties[key]
            # do not check autogenerated values
            # TODO: Calculate nic.lan and volume.image
            if modelValue is '<auto-generated-id>' or modelValue.id is '<auto-generated-id>'
                continue
            if not _.isEqual modelValue, remoteValue
                console.info "#{path} #{key}: Remote value '#{remoteValue}' does not match defined value '#{modelValue}'"

    _createMap: (array) ->
        array.reduce (previousValue, currentValue) ->
            previousValue[currentValue.properties.name] = currentValue
            return previousValue
        , {}

    _findDuplicates: (array) ->
        return _.uniq array.sort().filter( (element, index, array) -> element is array[index + 1] ), true

module.exports = DatacenterInspector